//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub username: String,
    pub first_name: String,
    pub last_name: String,
    pub age: i32,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
    pub gender: String,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::avatar::Entity")]
    Avatar,
    #[sea_orm(has_many = "super::pass_reset::Entity")]
    PassReset,
    #[sea_orm(has_many = "super::user_details::Entity")]
    UserDetails,
}

impl Related<super::avatar::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Avatar.def()
    }
}

impl Related<super::pass_reset::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PassReset.def()
    }
}

impl Related<super::user_details::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserDetails.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
