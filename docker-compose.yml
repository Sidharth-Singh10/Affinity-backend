version: '3.8'

services:
  rusty_backend:
    build: .
    container_name: rusty_backend
    working_dir: /app  # Consistent with the Dockerfile working directory
    depends_on:
      - postgres
      - docker
      - redis
    volumes:
      - rusty_backend-docker-certs:/certs/client:ro
      - rusty_backend-data:/var/rusty_backend_home
      # - ./certs/client:/certs/client:ro
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "3001:3001"  # Exposing the Rust backend application port on 3001
    networks:
      - backend_net
    command: ["./rusty_backend"]  # Command to start the application
    env_file: .env.example
      # ADD AWS CREDS to run code runner

  postgres:
    image: postgres:latest
    container_name: postgres
    env_file: .env.example
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend_net
    ports:
      - "5432:5432"  # Exposing the PostgreSQL database port

  migration_runner:
    image: rust:latest
    container_name: migration_runner
    command: "bash -c 'cargo install sea-orm-cli && sea-orm-cli migrate up'"
    working_dir: /app
    depends_on:
      - postgres  # Ensure migrations only run after the database is available
    networks:
      - backend_net
    volumes:
      - ./:/app  # Mount project directory to /app in the container
    env_file: .env.example

  docker:
    image: docker:dind
    container_name: DiD
    privileged: true
    env_file: .env.example
    volumes:
      - rusty_backend-docker-certs:/certs/client
      - rusty_backend-data:/var/rusty_backend_home
    networks:
      - backend_net
    ports:
      - "2376:2376" 
  redis:  # Add Redis service
    image: redis:latest
    container_name: redis
    networks:
      - backend_net
    ports:
      - "6379:6379"


networks:
  backend_net:
    driver: bridge

volumes:
  postgres_data:
  rusty_backend-docker-certs:
  rusty_backend-data:
 rusty_backend-data:
